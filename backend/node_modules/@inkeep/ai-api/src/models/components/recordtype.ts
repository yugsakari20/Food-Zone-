/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export enum RecordTypeEnumerated {
  Documentation = "documentation",
  Site = "site",
  DiscoursePost = "discourse_post",
  GithubIssue = "github_issue",
  GithubDiscussion = "github_discussion",
  StackoverflowQuestion = "stackoverflow_question",
  DiscordForumPost = "discord_forum_post",
  DiscordMessage = "discord_message",
  CustomQuestionAnswer = "custom_question_answer",
}

/**
 * The type of record
 */
export type RecordType = RecordTypeEnumerated | string;

/** @internal */
export const RecordTypeEnumerated$inboundSchema: z.ZodNativeEnum<
  typeof RecordTypeEnumerated
> = z.nativeEnum(RecordTypeEnumerated);

/** @internal */
export const RecordTypeEnumerated$outboundSchema: z.ZodNativeEnum<
  typeof RecordTypeEnumerated
> = RecordTypeEnumerated$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordTypeEnumerated$ {
  /** @deprecated use `RecordTypeEnumerated$inboundSchema` instead. */
  export const inboundSchema = RecordTypeEnumerated$inboundSchema;
  /** @deprecated use `RecordTypeEnumerated$outboundSchema` instead. */
  export const outboundSchema = RecordTypeEnumerated$outboundSchema;
}

/** @internal */
export const RecordType$inboundSchema: z.ZodType<
  RecordType,
  z.ZodTypeDef,
  unknown
> = z.union([RecordTypeEnumerated$inboundSchema, z.string()]);

/** @internal */
export type RecordType$Outbound = string | string;

/** @internal */
export const RecordType$outboundSchema: z.ZodType<
  RecordType$Outbound,
  z.ZodTypeDef,
  RecordType
> = z.union([RecordTypeEnumerated$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecordType$ {
  /** @deprecated use `RecordType$inboundSchema` instead. */
  export const inboundSchema = RecordType$inboundSchema;
  /** @deprecated use `RecordType$outboundSchema` instead. */
  export const outboundSchema = RecordType$outboundSchema;
  /** @deprecated use `RecordType$Outbound` instead. */
  export type Outbound = RecordType$Outbound;
}
