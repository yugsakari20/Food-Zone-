/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  RecordT,
  RecordT$inboundSchema,
  RecordT$Outbound,
  RecordT$outboundSchema,
} from "./record.js";

export type Citation = {
  number?: number | undefined;
  record: RecordT;
  hitUrl?: string | null | undefined;
};

/** @internal */
export const Citation$inboundSchema: z.ZodType<
  Citation,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.number().int().optional(),
  record: RecordT$inboundSchema,
  hit_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "hit_url": "hitUrl",
  });
});

/** @internal */
export type Citation$Outbound = {
  number?: number | undefined;
  record: RecordT$Outbound;
  hit_url?: string | null | undefined;
};

/** @internal */
export const Citation$outboundSchema: z.ZodType<
  Citation$Outbound,
  z.ZodTypeDef,
  Citation
> = z.object({
  number: z.number().int().optional(),
  record: RecordT$outboundSchema,
  hitUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    hitUrl: "hit_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Citation$ {
  /** @deprecated use `Citation$inboundSchema` instead. */
  export const inboundSchema = Citation$inboundSchema;
  /** @deprecated use `Citation$outboundSchema` instead. */
  export const outboundSchema = Citation$outboundSchema;
  /** @deprecated use `Citation$Outbound` instead. */
  export type Outbound = Citation$Outbound;
}
