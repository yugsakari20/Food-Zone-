/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  RecordsCited,
  RecordsCited$inboundSchema,
  RecordsCited$Outbound,
  RecordsCited$outboundSchema,
} from "./recordscited.js";

/**
 * A server-sent event with information about the records cited in the message.
 */
export type ChatResultRecordsCitedEvent = {
  event?: "records_cited" | undefined;
  data: RecordsCited;
};

/** @internal */
export const ChatResultRecordsCitedEvent$inboundSchema: z.ZodType<
  ChatResultRecordsCitedEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.literal("records_cited").optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(RecordsCited$inboundSchema),
});

/** @internal */
export type ChatResultRecordsCitedEvent$Outbound = {
  event: "records_cited";
  data: RecordsCited$Outbound;
};

/** @internal */
export const ChatResultRecordsCitedEvent$outboundSchema: z.ZodType<
  ChatResultRecordsCitedEvent$Outbound,
  z.ZodTypeDef,
  ChatResultRecordsCitedEvent
> = z.object({
  event: z.literal("records_cited").default("records_cited" as const),
  data: RecordsCited$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatResultRecordsCitedEvent$ {
  /** @deprecated use `ChatResultRecordsCitedEvent$inboundSchema` instead. */
  export const inboundSchema = ChatResultRecordsCitedEvent$inboundSchema;
  /** @deprecated use `ChatResultRecordsCitedEvent$outboundSchema` instead. */
  export const outboundSchema = ChatResultRecordsCitedEvent$outboundSchema;
  /** @deprecated use `ChatResultRecordsCitedEvent$Outbound` instead. */
  export type Outbound = ChatResultRecordsCitedEvent$Outbound;
}
