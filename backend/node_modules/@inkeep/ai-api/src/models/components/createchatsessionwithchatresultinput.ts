/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ChatSessionInput,
  ChatSessionInput$inboundSchema,
  ChatSessionInput$Outbound,
  ChatSessionInput$outboundSchema,
} from "./chatsessioninput.js";

export enum ChatModeOptions {
  Turbo = "turbo",
  Auto = "auto",
}

export type ChatMode = ChatModeOptions | string;

export type CreateChatSessionWithChatResultInput = {
  integrationId: string;
  chatSession: ChatSessionInput;
  chatMode?: ChatModeOptions | string | undefined;
  stream?: boolean | undefined;
};

/** @internal */
export const ChatModeOptions$inboundSchema: z.ZodNativeEnum<
  typeof ChatModeOptions
> = z.nativeEnum(ChatModeOptions);

/** @internal */
export const ChatModeOptions$outboundSchema: z.ZodNativeEnum<
  typeof ChatModeOptions
> = ChatModeOptions$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatModeOptions$ {
  /** @deprecated use `ChatModeOptions$inboundSchema` instead. */
  export const inboundSchema = ChatModeOptions$inboundSchema;
  /** @deprecated use `ChatModeOptions$outboundSchema` instead. */
  export const outboundSchema = ChatModeOptions$outboundSchema;
}

/** @internal */
export const ChatMode$inboundSchema: z.ZodType<
  ChatMode,
  z.ZodTypeDef,
  unknown
> = z.union([ChatModeOptions$inboundSchema, z.string()]);

/** @internal */
export type ChatMode$Outbound = string | string;

/** @internal */
export const ChatMode$outboundSchema: z.ZodType<
  ChatMode$Outbound,
  z.ZodTypeDef,
  ChatMode
> = z.union([ChatModeOptions$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMode$ {
  /** @deprecated use `ChatMode$inboundSchema` instead. */
  export const inboundSchema = ChatMode$inboundSchema;
  /** @deprecated use `ChatMode$outboundSchema` instead. */
  export const outboundSchema = ChatMode$outboundSchema;
  /** @deprecated use `ChatMode$Outbound` instead. */
  export type Outbound = ChatMode$Outbound;
}

/** @internal */
export const CreateChatSessionWithChatResultInput$inboundSchema: z.ZodType<
  CreateChatSessionWithChatResultInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  integration_id: z.string(),
  chat_session: ChatSessionInput$inboundSchema,
  chat_mode: z.union([ChatModeOptions$inboundSchema, z.string()]).optional(),
  stream: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "integration_id": "integrationId",
    "chat_session": "chatSession",
    "chat_mode": "chatMode",
  });
});

/** @internal */
export type CreateChatSessionWithChatResultInput$Outbound = {
  integration_id: string;
  chat_session: ChatSessionInput$Outbound;
  chat_mode?: string | string | undefined;
  stream: boolean;
};

/** @internal */
export const CreateChatSessionWithChatResultInput$outboundSchema: z.ZodType<
  CreateChatSessionWithChatResultInput$Outbound,
  z.ZodTypeDef,
  CreateChatSessionWithChatResultInput
> = z.object({
  integrationId: z.string(),
  chatSession: ChatSessionInput$outboundSchema,
  chatMode: z.union([ChatModeOptions$outboundSchema, z.string()]).optional(),
  stream: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    integrationId: "integration_id",
    chatSession: "chat_session",
    chatMode: "chat_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatSessionWithChatResultInput$ {
  /** @deprecated use `CreateChatSessionWithChatResultInput$inboundSchema` instead. */
  export const inboundSchema =
    CreateChatSessionWithChatResultInput$inboundSchema;
  /** @deprecated use `CreateChatSessionWithChatResultInput$outboundSchema` instead. */
  export const outboundSchema =
    CreateChatSessionWithChatResultInput$outboundSchema;
  /** @deprecated use `CreateChatSessionWithChatResultInput$Outbound` instead. */
  export type Outbound = CreateChatSessionWithChatResultInput$Outbound;
}
