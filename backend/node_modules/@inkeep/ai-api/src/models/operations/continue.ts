/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type ContinueRequest = {
  chatSessionId: string;
  continueChatSessionWithChatResultInput:
    components.ContinueChatSessionWithChatResultInput;
};

export type ContinueResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Successful Response
   */
  chatResult?: components.ChatResult | undefined;
  /**
   * Successful Response
   */
  chatResultStream?: EventStream<components.ChatResultStream> | undefined;
};

/** @internal */
export const ContinueRequest$inboundSchema: z.ZodType<
  ContinueRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chat_session_id: z.string(),
  ContinueChatSessionWithChatResultInput:
    components.ContinueChatSessionWithChatResultInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "chat_session_id": "chatSessionId",
    "ContinueChatSessionWithChatResultInput":
      "continueChatSessionWithChatResultInput",
  });
});

/** @internal */
export type ContinueRequest$Outbound = {
  chat_session_id: string;
  ContinueChatSessionWithChatResultInput:
    components.ContinueChatSessionWithChatResultInput$Outbound;
};

/** @internal */
export const ContinueRequest$outboundSchema: z.ZodType<
  ContinueRequest$Outbound,
  z.ZodTypeDef,
  ContinueRequest
> = z.object({
  chatSessionId: z.string(),
  continueChatSessionWithChatResultInput:
    components.ContinueChatSessionWithChatResultInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    chatSessionId: "chat_session_id",
    continueChatSessionWithChatResultInput:
      "ContinueChatSessionWithChatResultInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContinueRequest$ {
  /** @deprecated use `ContinueRequest$inboundSchema` instead. */
  export const inboundSchema = ContinueRequest$inboundSchema;
  /** @deprecated use `ContinueRequest$outboundSchema` instead. */
  export const outboundSchema = ContinueRequest$outboundSchema;
  /** @deprecated use `ContinueRequest$Outbound` instead. */
  export type Outbound = ContinueRequest$Outbound;
}

/** @internal */
export const ContinueResponse$inboundSchema: z.ZodType<
  ContinueResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  ChatResult: components.ChatResult$inboundSchema.optional(),
  ChatResultStream: z.instanceof(ReadableStream<Uint8Array>).transform(
    stream => {
      return new EventStream({
        stream,
        decoder(rawEvent) {
          const schema = components.ChatResultStream$inboundSchema;
          return schema.parse(rawEvent);
        },
      });
    },
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "ChatResult": "chatResult",
    "ChatResultStream": "chatResultStream",
  });
});

/** @internal */
export type ContinueResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  ChatResult?: components.ChatResult$Outbound | undefined;
  ChatResultStream?: never | undefined;
};

/** @internal */
export const ContinueResponse$outboundSchema: z.ZodType<
  ContinueResponse$Outbound,
  z.ZodTypeDef,
  ContinueResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  chatResult: components.ChatResult$outboundSchema.optional(),
  chatResultStream: z.never().optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    chatResult: "ChatResult",
    chatResultStream: "ChatResultStream",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContinueResponse$ {
  /** @deprecated use `ContinueResponse$inboundSchema` instead. */
  export const inboundSchema = ContinueResponse$inboundSchema;
  /** @deprecated use `ContinueResponse$outboundSchema` instead. */
  export const outboundSchema = ContinueResponse$outboundSchema;
  /** @deprecated use `ContinueResponse$Outbound` instead. */
  export type Outbound = ContinueResponse$Outbound;
}
