import * as z from "zod";
export declare enum Four {
    Stop = "stop",
    Length = "length",
    ContentFilter = "content_filter"
}
export type MessageChunk = {
    chatSessionId?: string | null | undefined;
    contentChunk: string;
    finishReason?: any | null | undefined;
};
/** @internal */
export declare const Four$inboundSchema: z.ZodNativeEnum<typeof Four>;
/** @internal */
export declare const Four$outboundSchema: z.ZodNativeEnum<typeof Four>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Four$ {
    /** @deprecated use `Four$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<typeof Four>;
    /** @deprecated use `Four$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<typeof Four>;
}
/** @internal */
export declare const MessageChunk$inboundSchema: z.ZodType<MessageChunk, z.ZodTypeDef, unknown>;
/** @internal */
export type MessageChunk$Outbound = {
    chat_session_id?: string | null | undefined;
    content_chunk: string;
    finish_reason?: any | null | undefined;
};
/** @internal */
export declare const MessageChunk$outboundSchema: z.ZodType<MessageChunk$Outbound, z.ZodTypeDef, MessageChunk>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace MessageChunk$ {
    /** @deprecated use `MessageChunk$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MessageChunk, z.ZodTypeDef, unknown>;
    /** @deprecated use `MessageChunk$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MessageChunk$Outbound, z.ZodTypeDef, MessageChunk>;
    /** @deprecated use `MessageChunk$Outbound` instead. */
    type Outbound = MessageChunk$Outbound;
}
//# sourceMappingURL=messagechunk.d.ts.map