import * as z from "zod";
import { RecordType, RecordType$Outbound } from "./recordtype.js";
export type RecordT = {
    /**
     * The type of record
     */
    type: RecordType;
    url?: string | null | undefined;
    title?: string | null | undefined;
    description?: string | null | undefined;
    breadcrumbs?: Array<string> | null | undefined;
};
/** @internal */
export declare const RecordT$inboundSchema: z.ZodType<RecordT, z.ZodTypeDef, unknown>;
/** @internal */
export type RecordT$Outbound = {
    type: RecordType$Outbound;
    url?: string | null | undefined;
    title?: string | null | undefined;
    description?: string | null | undefined;
    breadcrumbs?: Array<string> | null | undefined;
};
/** @internal */
export declare const RecordT$outboundSchema: z.ZodType<RecordT$Outbound, z.ZodTypeDef, RecordT>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RecordT$ {
    /** @deprecated use `RecordT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RecordT, z.ZodTypeDef, unknown>;
    /** @deprecated use `RecordT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RecordT$Outbound, z.ZodTypeDef, RecordT>;
    /** @deprecated use `RecordT$Outbound` instead. */
    type Outbound = RecordT$Outbound;
}
//# sourceMappingURL=record.d.ts.map