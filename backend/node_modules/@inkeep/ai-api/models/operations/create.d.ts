import * as z from "zod";
import { EventStream } from "../../lib/event-streams.js";
import * as components from "../components/index.js";
export type CreateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    chatResult?: components.ChatResult | undefined;
    /**
     * Successful Response
     */
    chatResultStream?: EventStream<components.ChatResultStream> | undefined;
};
/** @internal */
export declare const CreateResponse$inboundSchema: z.ZodType<CreateResponse, z.ZodTypeDef, unknown>;
/** @internal */
export type CreateResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    ChatResult?: components.ChatResult$Outbound | undefined;
    ChatResultStream?: never | undefined;
};
/** @internal */
export declare const CreateResponse$outboundSchema: z.ZodType<CreateResponse$Outbound, z.ZodTypeDef, CreateResponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CreateResponse$ {
    /** @deprecated use `CreateResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateResponse$Outbound, z.ZodTypeDef, CreateResponse>;
    /** @deprecated use `CreateResponse$Outbound` instead. */
    type Outbound = CreateResponse$Outbound;
}
//# sourceMappingURL=create.d.ts.map