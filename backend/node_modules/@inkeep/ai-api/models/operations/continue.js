"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContinueResponse$ = exports.ContinueResponse$outboundSchema = exports.ContinueResponse$inboundSchema = exports.ContinueRequest$ = exports.ContinueRequest$outboundSchema = exports.ContinueRequest$inboundSchema = void 0;
const z = __importStar(require("zod"));
const event_streams_js_1 = require("../../lib/event-streams.js");
const primitives_js_1 = require("../../lib/primitives.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.ContinueRequest$inboundSchema = z.object({
    chat_session_id: z.string(),
    ContinueChatSessionWithChatResultInput: components.ContinueChatSessionWithChatResultInput$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "chat_session_id": "chatSessionId",
        "ContinueChatSessionWithChatResultInput": "continueChatSessionWithChatResultInput",
    });
});
/** @internal */
exports.ContinueRequest$outboundSchema = z.object({
    chatSessionId: z.string(),
    continueChatSessionWithChatResultInput: components.ContinueChatSessionWithChatResultInput$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        chatSessionId: "chat_session_id",
        continueChatSessionWithChatResultInput: "ContinueChatSessionWithChatResultInput",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ContinueRequest$;
(function (ContinueRequest$) {
    /** @deprecated use `ContinueRequest$inboundSchema` instead. */
    ContinueRequest$.inboundSchema = exports.ContinueRequest$inboundSchema;
    /** @deprecated use `ContinueRequest$outboundSchema` instead. */
    ContinueRequest$.outboundSchema = exports.ContinueRequest$outboundSchema;
})(ContinueRequest$ || (exports.ContinueRequest$ = ContinueRequest$ = {}));
/** @internal */
exports.ContinueResponse$inboundSchema = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    ChatResult: components.ChatResult$inboundSchema.optional(),
    ChatResultStream: z.instanceof((ReadableStream)).transform(stream => {
        return new event_streams_js_1.EventStream({
            stream,
            decoder(rawEvent) {
                const schema = components.ChatResultStream$inboundSchema;
                return schema.parse(rawEvent);
            },
        });
    }).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "ChatResult": "chatResult",
        "ChatResultStream": "chatResultStream",
    });
});
/** @internal */
exports.ContinueResponse$outboundSchema = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
    }),
    chatResult: components.ChatResult$outboundSchema.optional(),
    chatResultStream: z.never().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        contentType: "ContentType",
        statusCode: "StatusCode",
        rawResponse: "RawResponse",
        chatResult: "ChatResult",
        chatResultStream: "ChatResultStream",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ContinueResponse$;
(function (ContinueResponse$) {
    /** @deprecated use `ContinueResponse$inboundSchema` instead. */
    ContinueResponse$.inboundSchema = exports.ContinueResponse$inboundSchema;
    /** @deprecated use `ContinueResponse$outboundSchema` instead. */
    ContinueResponse$.outboundSchema = exports.ContinueResponse$outboundSchema;
})(ContinueResponse$ || (exports.ContinueResponse$ = ContinueResponse$ = {}));
//# sourceMappingURL=continue.js.map